import 'dart:io';

import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;
import 'package:musify/models/favorite_track.dart'
    as model; // Aliased to avoid name clash

part 'database.g.dart';

// Define the table
@DataClassName(
  'FavoriteTrackEntry',
) // Name for the generated data class by Drift
class FavoriteTracks extends Table {
  // Auto-incrementing primary key
  IntColumn get id => integer().autoIncrement()();
  // Foreign key to the actual track's ID. Consider adding an actual foreign key constraint
  // if you have a Tracks table in Drift. For now, it's just an integer.
  IntColumn get trackId => integer()();
  // Timestamp when the track was favorited
  DateTimeColumn get dateFavorited => dateTime()();
  // Optional user ID for multi-user support
  TextColumn get userId => text().nullable()();
  // Optional flag for cloud sync status
  BoolColumn get isSynced => boolean().withDefault(const Constant(false))();
  // Optional integer for custom sorting by user
  IntColumn get customOrder => integer().nullable()();

  // If you want to ensure trackId is unique to prevent duplicates per user (or globally if no userId)
  // @override
  // Set<Column> get primaryKey => {trackId}; // Or {trackId, userId} if multi-user
}

// Define the database
@DriftDatabase(tables: [FavoriteTracks])
class AppDatabase extends _$AppDatabase {
  AppDatabase() : super(_openConnection());

  @override
  int get schemaVersion => 1;

  // CRUD operations for FavoriteTracks will be generated by Drift
  // We can add custom queries or DAOs if needed.

  // Example: Get all favorites
  Future<List<model.FavoriteTrack>> getAllFavoriteTracks() async {
    final entries = await select(favoriteTracks).get();
    return entries
        .map(
          (entry) => model.FavoriteTrack(
            id: entry.id,
            trackId: entry.trackId,
            dateFavorited: entry.dateFavorited,
            userId: entry.userId,
            isSynced: entry.isSynced,
            customOrder: entry.customOrder,
          ),
        )
        .toList();
  }

  // Example: Add a favorite
  Future<int> addFavoriteTrack(model.FavoriteTrack favorite) {
    return into(favoriteTracks).insert(
      FavoriteTracksCompanion.insert(
        trackId: favorite.trackId,
        dateFavorited: favorite.dateFavorited,
        userId: Value(favorite.userId), // Use Value() for nullable fields
        isSynced: Value(favorite.isSynced),
        customOrder: Value(favorite.customOrder),
      ),
    );
  }

  // Example: Remove a favorite by trackId
  Future<int> removeFavoriteTrack(int trackId) {
    return (delete(favoriteTracks)
      ..where((tbl) => tbl.trackId.equals(trackId))).go();
  }

  // Example: Check if a track is favorited by trackId
  Future<bool> isTrackFavorited(int trackId) async {
    final query = select(favoriteTracks)
      ..where((tbl) => tbl.trackId.equals(trackId));
    final result = await query.getSingleOrNull();
    return result != null;
  }

  // You might want a method to get a FavoriteTrack by trackId as well
  Future<model.FavoriteTrack?> getFavoriteByTrackId(int trackId) async {
    final entry =
        await (select(favoriteTracks)
          ..where((tbl) => tbl.trackId.equals(trackId))).getSingleOrNull();
    if (entry == null) return null;
    return model.FavoriteTrack(
      id: entry.id,
      trackId: entry.trackId,
      dateFavorited: entry.dateFavorited,
      userId: entry.userId,
      isSynced: entry.isSynced,
      customOrder: entry.customOrder,
    );
  }
}

LazyDatabase _openConnection() {
  // The LazyDatabase util lets us find the right location for the file async.
  return LazyDatabase(() async {
    final dbFolder = await getApplicationDocumentsDirectory();
    final file = File(p.join(dbFolder.path, 'musify_favorites.sqlite'));
    return NativeDatabase(file);
  });
}

// After creating this file, you need to run the build_runner to generate `database.g.dart`:
// flutter pub run build_runner build --delete-conflicting-outputs
// Add `part 'database.g.dart';` at the top of this file AFTER running build_runner.
